{"version":3,"sources":["constants.js","utils.js","pages/Films.js","components/EntityLink.js","pages/Film.js","pages/People.js","pages/Planets.js","pages/Starships.js","pages/Vehicles.js","pages/Species.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","getRoutUrl","url","substring","length","Films","useState","data","setData","text","setText","fetchDataFilms","a","axios","get","response","results","console","log","message","useEffect","filteredFilms","sort","b","title","filter","toLowerCase","includes","justify","span","placeholder","prefix","SearchOutlined","value","onChange","target","className","map","key","to","EntityLink","Film","filmId","useParams","Panel","Collapse","fetchDataFilm","opening_crawl","director","producer","release_date","showArrow","header","characters","planets","starships","vehicles","species","People","peopleId","fetchDataPeople","name","height","mass","hair_color","skin_color","eye_color","birth_year","gender","homeworld","films","Planets","planetsId","fetchDataPlanets","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","residents","Starships","starshipsId","fetchDataStarships","model","manufacturer","cost_in_credits","max_atmosphering_speed","crew","passengers","cargo_capacity","consumables","hyperdrive_rating","MGLT","starship_class","Vehicles","vehiclesId","fetchDataVehicles","vehicle_class","Species","speciesId","fetchDataSpecies","classification","designation","average_height","average_lifespan","language","people","App","orientation","src","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0d359c49.chunk.js","sourcesContent":["export const API_URL = 'https://swapi.dev/api'","import { API_URL } from './constants'\n\nexport const getRoutUrl = url => url.substring(API_URL.length - 1)","import React, {Fragment, useEffect, useState} from 'react';\nimport 'antd/dist/antd.css';\nimport {Row, Col, Input} from 'antd'\nimport { SearchOutlined } from '@ant-design/icons';\nimport axios from 'axios'\nimport { Link } from \"react-router-dom\";\nimport {getRoutUrl} from \"../utils\";\n\nconst Films = () => {\n    const [data, setData] = useState([])\n    const [text, setText] = useState(\"\")\n\n    const fetchDataFilms = async () => {\n        try{\n            const response = await axios.get('https://swapi.dev/api/films/')\n            setData(response.data.results)\n        } catch (e) {\n            console.log(\"error:\", e.message)\n        }\n    }\n\n    useEffect( () => {\n        fetchDataFilms()\n    }, [])\n\n    const sortedMovies = data.sort((a, b) => {\n        if (a.title < b.title)\n            return -1\n        if (a.title > b.title)\n            return 1\n        return 0\n    })\n\n    const filteredFilms = sortedMovies.filter(({title}) => title.toLowerCase().includes(text))\n\n    return (\n        <Fragment>\n            <Row justify=\"center\">\n                <Col span={14}>\n                    <Input\n                        placeholder=\"Search\"\n                        prefix={<SearchOutlined />}\n                        value={text}\n                        onChange={({target:{value}}) => setText(value)}\n                    />\n                </Col>\n            </Row>\n\n            <Row className=\"marginFilm\" justify=\"space-around\">\n                    {filteredFilms.map(({title, url}) =>(\n                        <Link key={url} to={getRoutUrl(url)}>\n                            <div className=\"borderOfTitle\">\n                                <h2>{title}</h2>\n                            </div>\n                        </Link>\n                    ))}\n            </Row>\n        </Fragment>\n    )\n}\n\nexport default Films;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport {getRoutUrl} from \"../utils\";\n\nconst EntityLink = ({ url }) => (\n    <Link  to={getRoutUrl(url)}>\n        <div>\n            {url}\n        </div>\n    </Link>\n)\n\nexport default EntityLink","import React, {Fragment, useEffect, useState} from 'react';\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport {API_URL} from \"../constants\";\nimport EntityLink from \"../components/EntityLink\";\nimport {Row, Col, Collapse} from \"antd\"\n\nconst Film = () => {\n    const [data, setData] = useState(null)\n    const { filmId } = useParams()\n\n    const { Panel } = Collapse;\n\n    const fetchDataFilm = async () => {\n        try{\n            const response = await axios.get(`${API_URL}/films/${filmId}/`)\n            setData(response.data)\n            console.log(response.data)\n        } catch (e) {\n            console.log(\"error:\", e.message)\n        }\n    }\n\n    useEffect( () => {\n        fetchDataFilm()\n    }, [])\n\n    console.log(\"data validation\")\n\n    return (\n        <Fragment>\n            {data && (\n                <Row  justify=\"center\">\n                    <Col span={18} className=\"coverForDate\">\n                        <p>Hi</p>\n                       <h1 className=\"colorOfTitle\"> \"{data.title}\"</h1>\n                        <h3 className=\"openingCrawl\">Opening crawl: {data.opening_crawl}</h3>\n                        <h3>Director: {data.director}</h3>\n                        <h3>Producer: {data.producer}</h3>\n                        <h3>Release date: {data.release_date}</h3>\n                        <Collapse>\n                            <Panel showArrow={false} header=\"Characters\" key=\"1\">\n                               {data.characters.map(url => <EntityLink key={url} url={url} />)}\n                            </Panel>\n                            <Panel showArrow={false}  header=\"Planets\" key=\"2\">\n                                {data.planets.map(url => <EntityLink key={url} url={url} />)}\n                            </Panel>\n                            <Panel showArrow={false}  header=\"Starships\" key=\"3\">\n                                {data.starships.map(url => <EntityLink key={url} url={url} />)}\n                            </Panel>\n                            <Panel showArrow={false} header=\"Vehicles\" key=\"4\">\n                                {data.vehicles.map(url => <EntityLink key={url} url={url} />)}\n                            </Panel>\n                            <Panel showArrow={false} header=\"Species\" key=\"5\">\n                                {data.species.map(url => <EntityLink key={url} url={url} />)}\n                            </Panel>\n                        </Collapse>\n                    </Col>\n                </Row>\n            )}\n        </Fragment>\n    )\n}\n\nexport default Film","import React, {Fragment, useEffect, useState} from 'react';\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport {API_URL} from \"../constants\";\nimport EntityLink from \"../components/EntityLink\";\nimport {Col, Collapse, Row} from \"antd\";\n\nconst { Panel } = Collapse;\n\nconst People = () => {\n    const [data, setData] = useState(null)\n    const { peopleId } = useParams()\n\n    const fetchDataPeople = async () => {\n        try{\n            const response = await axios.get(`${API_URL}/people/${peopleId}/`)\n            setData(response.data)\n            console.log(response.data)\n        } catch (e) {\n            console.log(\"error:\", e.message)\n        }\n    }\n\n    useEffect( () => {\n        fetchDataPeople()\n    }, [])\n\n    return (\n        <Fragment>\n            {data && (\n                <Row  justify=\"center\">\n                    <Col span={18} className=\"coverForDate\">\n\n                        <h1 className=\"colorOfTitle\">Name: {data.name}</h1>\n                        <h3> Height: {data.height}</h3>\n                        <h3> Mass: {data.mass}</h3>\n                        <h3> Hair color: {data.hair_color}</h3>\n                        <h3> Skin color: {data.skin_color}</h3>\n                        <h3> Eye color: {data.eye_color}</h3>\n                        <h3> Birth year: {data.birth_year}</h3>\n                        <h3> Gender: {data.gender}</h3>\n                        <Collapse>\n                            <Panel showArrow={false} header=\"Homeworld\" key=\"1\">\n                                 <EntityLink url={data.homeworld} />\n                            </Panel>\n                            <Panel showArrow={false} header=\"Films\" key=\"2\">\n                                {data.films.length <= 0 ?  <p> Nothing is found </p> : data.films.map(url => <EntityLink key={url} url={url} />)}\n                            </Panel>\n                            <Panel showArrow={false} header=\"Starships\" key=\"3\">\n                                {data.starships.length <= 0 ?  <p> Nothing is found </p> : data.starships.map(url => <EntityLink key={url} url={url} />)}\n                            </Panel>\n                            <Panel showArrow={false} header=\"Species\" key=\"4\">\n                                {data.species.length <= 0 ? <p> Nothing is found </p>  : data.species.map(url => <EntityLink key={url} url={url} />)}\n                            </Panel>\n                        </Collapse>\n\n                    </Col>\n                </Row>\n            )}\n        </Fragment>\n    )\n}\n\nexport default People","import React, {Fragment, useEffect, useState} from 'react';\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport {API_URL} from \"../constants\";\nimport EntityLink from \"../components/EntityLink\";\nimport {Col, Collapse, Row} from \"antd\";\n\nconst { Panel } = Collapse;\n\nconst Planets = () => {\n    const [data, setData] = useState(null)\n    const { planetsId } = useParams()\n\n    const fetchDataPlanets = async () => {\n        try{\n            const response = await axios.get(`${API_URL}/planets/${planetsId}/`)\n            setData(response.data)\n        } catch (e) {\n            console.log(\"error:\", e.message)\n        }\n    }\n\n    useEffect( () => {\n        fetchDataPlanets()\n    }, [])\n\n    return (\n        <Fragment>\n            {data && (\n                <Row  justify=\"center\">\n                    <Col span={18} className=\"coverForDate\">\n                        <h1 className=\"colorOfTitle\"> Name: {data.name}</h1>\n                        <h3> Rotation period: {data.rotation_period}</h3>\n                        <h3> Orbital period: {data.orbital_period}</h3>\n                        <h3> Diameter: {data.diameter}</h3>\n                        <h3> Climate: {data.climate}</h3>\n                        <h3> Gravity: {data.gravity}</h3>\n                        <h3> Terrain: {data.terrain}</h3>\n                        <h3> Surface water: {data.surface_water}</h3>\n                        <h3> Population: {data.population}</h3>\n                        <Collapse>\n                            <Panel showArrow={false} header=\"Residents\" key=\"1\">\n                                {data.residents.map(url => <EntityLink key={url} url={url} />)}\n                            </Panel>\n                            <Panel showArrow={false} header=\"Films\" key=\"2\">\n                                {data.films.map(url => <EntityLink key={url} url={url} />)}\n                            </Panel>\n                        </Collapse>\n                    </Col>\n                </Row>\n            )}\n        </Fragment>\n    )\n}\n\nexport default Planets","import React, {Fragment, useEffect, useState} from 'react';\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport {API_URL} from \"../constants\";\nimport EntityLink from \"../components/EntityLink\";\nimport {Col, Collapse, Row} from \"antd\";\n\nconst { Panel } = Collapse;\n\nconst Starships = () => {\n    const [data, setData] = useState(null)\n    const { starshipsId } = useParams()\n\n    const fetchDataStarships = async () => {\n        try{\n            const response = await axios.get(`${API_URL}/starships/${starshipsId}/`)\n            setData(response.data)\n        } catch (e) {\n            console.log(\"error:\", e.message)\n        }\n    }\n\n    useEffect( () => {\n        fetchDataStarships()\n    }, [])\n\n    return (\n        <Fragment>\n            {data && (\n                <Row  justify=\"center\">\n                    <Col span={18} className=\"coverForDate\">\n                        <h1 className=\"colorOfTitle\"> Name: {data.name}</h1>\n                        <h3>Model: {data.model}</h3>\n                        <h3>Manufacturer: {data.manufacturer}</h3>\n                        <h3>Cost in credits: {data.cost_in_credits}</h3>\n                        <h3>Length: {data.length}</h3>\n                        <h3>Max atmosphering speed: {data.max_atmosphering_speed}</h3>\n                        <h3>Crew: {data.crew}</h3>\n                        <h3>Passengers: {data.passengers}</h3>\n                        <h3>Cargo capacity: {data.cargo_capacity}</h3>\n                        <h3>Consumables: {data.consumables}</h3>\n                        <h3>Hyperdrive rating: {data.hyperdrive_rating}</h3>\n                        <h3>MGLT: {data.MGLT}</h3>\n                        <h3>Starship class: {data.starship_class}</h3>\n                        <Collapse>\n                            <Panel showArrow={false} header=\"Films\" key=\"1\">\n                                {data.films.map(url => <EntityLink key={url} url={url} />)}\n                            </Panel>\n                        </Collapse>\n                    </Col>\n                </Row>\n            )}\n        </Fragment>\n    )\n}\n\nexport default Starships","import React, {Fragment, useEffect, useState} from 'react';\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport {API_URL} from \"../constants\";\nimport EntityLink from \"../components/EntityLink\";\nimport {Col, Collapse, Row} from \"antd\";\n\nconst { Panel } = Collapse;\n\nconst Vehicles = () => {\n    const [data, setData] = useState(null)\n    const { vehiclesId } = useParams()\n\n    const fetchDataVehicles = async () => {\n        try{\n            const response = await axios.get(`${API_URL}/vehicles/${vehiclesId}/`)\n            setData(response.data)\n            console.log(response.data)\n        } catch (e) {\n            console.log(\"error:\", e.message)\n        }\n    }\n\n    useEffect( () => {\n        fetchDataVehicles()\n    }, [])\n\n    return (\n        <Fragment>\n            {data && (\n                <Row  justify=\"center\">\n                    <Col span={18} className=\"coverForDate\">\n                        <h1 className=\"colorOfTitle\">Name: {data.name}</h1>\n                        <h3> Model: {data.model}</h3>\n                        <h3> Manufacturer: {data.manufacturer}</h3>\n                        <h3> Cost in credits: {data.cost_in_credits}</h3>\n                        <h3> Length: {data.length}</h3>\n                        <h3> Max atmosphering speed: {data.max_atmosphering_speed}</h3>\n                        <h3> Crew: {data.crew}</h3>\n                        <h3> Passengers: {data.passengers}</h3>\n                        <h3> Cargo_capacity: {data.cargo_capacity}</h3>\n                        <h3> Consumables: {data.consumables}</h3>\n                        <h3> Vehicle class: {data.vehicle_class}</h3>\n                        <Collapse>\n                            <Panel showArrow={false} header=\"Films\" key=\"1\">\n                                {data.films.map(url => <EntityLink key={url} url={url} />)}\n                            </Panel>\n                        </Collapse>\n\n                    </Col>\n                </Row>\n            )}\n        </Fragment>\n    )\n}\n\nexport default Vehicles","import React, {Fragment, useEffect, useState} from 'react';\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport {API_URL} from \"../constants\";\nimport EntityLink from \"../components/EntityLink\";\nimport {Col, Collapse, Row} from \"antd\";\n\nconst { Panel } = Collapse;\n\nconst Species = () => {\n    const [data, setData] = useState(null)\n    const { speciesId } = useParams()\n\n    const fetchDataSpecies = async () => {\n        try{\n            const response = await axios.get(`${API_URL}/species/${speciesId}/`)\n            setData(response.data)\n            console.log(response.data)\n        } catch (e) {\n            console.log(\"error:\", e.message)\n        }\n    }\n\n    useEffect( () => {\n        fetchDataSpecies()\n    }, [])\n\n    return (\n        <Fragment>\n            {data && (\n                <Row  justify=\"center\">\n                    <Col span={18} className=\"coverForDate\">\n\n                        <h1 className=\"colorOfTitle\">Name: {data.name}</h1>\n                        <h3> Classification: {data.classification}</h3>\n                        <h3> Designation: {data.designation}</h3>\n                        <h3> Average_height: {data.average_height}</h3>\n                        <h3> Skin color: {data.skin_color}</h3>\n                        <h3> Eye color: {data.eye_color}</h3>\n                        <h3> Average lifespan: {data.average_lifespan}</h3>\n                        <h3> Homeworld: {data.homeworld}</h3>\n                        <h3> Language: {data.language}</h3>\n                        <Collapse>\n                            <Panel showArrow={false} header=\"People\" key=\"1\">\n                                {data.people.map(url => <EntityLink key={url} url={url} />)}\n                            </Panel>\n                            <Panel showArrow={false} header=\"Films\" key=\"2\">\n                                {data.films.map(url => <EntityLink key={url} url={url} />)}\n                            </Panel>\n                        </Collapse>\n\n                    </Col>\n                </Row>\n            )}\n        </Fragment>\n    )\n}\n\nexport default Species","import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport {Divider} from 'antd'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Films from './pages/Films';\nimport Film from './pages/Film';\nimport People from \"./pages/People\";\nimport Planets from \"./pages/Planets\";\nimport Starships from \"./pages/Starships\";\nimport Vehicles from  \"./pages/Vehicles\"\nimport Species from \"./pages/Species\";\n\nfunction App() {\n  return (\n      <Router>\n        <Divider orientation=\"left\"  className='aaa'>\n          <Link to=\"/\">\n            <img className=\"logo\" src=\"https://pngimg.com/uploads/star_wars_logo/star_wars_logo_PNG7.png\"/>\n          </Link>\n        </Divider>\n        <Switch>\n          <Route path=\"/films/:filmId\">\n            <Film />\n          </Route>\n          <Route path=\"/people/:peopleId\">\n            <People />\n          </Route>\n            <Route path=\"/planets/:planetsId\">\n                <Planets />\n            </Route>\n            <Route path=\"/starships/:starshipsId\">\n                <Starships />\n            </Route>\n            <Route path=\"/vehicles/:vehiclesId\">\n                <Vehicles />\n            </Route>\n            <Route path=\"/species/:speciesId\" >\n                <Species />\n            </Route>\n          <Route path=\"/\">\n            <Films />\n          </Route>\n        </Switch>\n      </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}